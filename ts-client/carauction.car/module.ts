// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateHighestPerHundred } from "./types/carauction/car/tx";
import { MsgUpdateBids } from "./types/carauction/car/tx";
import { MsgCreateBids } from "./types/carauction/car/tx";
import { MsgDeleteBids } from "./types/carauction/car/tx";
import { MsgPlaceBid } from "./types/carauction/car/tx";
import { MsgCreateHighestPerHundred } from "./types/carauction/car/tx";
import { MsgDeleteHighestPerHundred } from "./types/carauction/car/tx";


export { MsgUpdateHighestPerHundred, MsgUpdateBids, MsgCreateBids, MsgDeleteBids, MsgPlaceBid, MsgCreateHighestPerHundred, MsgDeleteHighestPerHundred };

type sendMsgUpdateHighestPerHundredParams = {
  value: MsgUpdateHighestPerHundred,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateBidsParams = {
  value: MsgUpdateBids,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateBidsParams = {
  value: MsgCreateBids,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteBidsParams = {
  value: MsgDeleteBids,
  fee?: StdFee,
  memo?: string
};

type sendMsgPlaceBidParams = {
  value: MsgPlaceBid,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateHighestPerHundredParams = {
  value: MsgCreateHighestPerHundred,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteHighestPerHundredParams = {
  value: MsgDeleteHighestPerHundred,
  fee?: StdFee,
  memo?: string
};


type msgUpdateHighestPerHundredParams = {
  value: MsgUpdateHighestPerHundred,
};

type msgUpdateBidsParams = {
  value: MsgUpdateBids,
};

type msgCreateBidsParams = {
  value: MsgCreateBids,
};

type msgDeleteBidsParams = {
  value: MsgDeleteBids,
};

type msgPlaceBidParams = {
  value: MsgPlaceBid,
};

type msgCreateHighestPerHundredParams = {
  value: MsgCreateHighestPerHundred,
};

type msgDeleteHighestPerHundredParams = {
  value: MsgDeleteHighestPerHundred,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateHighestPerHundred({ value, fee, memo }: sendMsgUpdateHighestPerHundredParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateHighestPerHundred: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateHighestPerHundred({ value: MsgUpdateHighestPerHundred.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateHighestPerHundred: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateBids({ value, fee, memo }: sendMsgUpdateBidsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateBids: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateBids({ value: MsgUpdateBids.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateBids: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateBids({ value, fee, memo }: sendMsgCreateBidsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateBids: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateBids({ value: MsgCreateBids.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateBids: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteBids({ value, fee, memo }: sendMsgDeleteBidsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteBids: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteBids({ value: MsgDeleteBids.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteBids: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPlaceBid({ value, fee, memo }: sendMsgPlaceBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPlaceBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgPlaceBid({ value: MsgPlaceBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPlaceBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateHighestPerHundred({ value, fee, memo }: sendMsgCreateHighestPerHundredParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateHighestPerHundred: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateHighestPerHundred({ value: MsgCreateHighestPerHundred.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateHighestPerHundred: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteHighestPerHundred({ value, fee, memo }: sendMsgDeleteHighestPerHundredParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteHighestPerHundred: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteHighestPerHundred({ value: MsgDeleteHighestPerHundred.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteHighestPerHundred: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateHighestPerHundred({ value }: msgUpdateHighestPerHundredParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgUpdateHighestPerHundred", value: MsgUpdateHighestPerHundred.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateHighestPerHundred: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateBids({ value }: msgUpdateBidsParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgUpdateBids", value: MsgUpdateBids.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateBids: Could not create message: ' + e.message)
			}
		},
		
		msgCreateBids({ value }: msgCreateBidsParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgCreateBids", value: MsgCreateBids.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateBids: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteBids({ value }: msgDeleteBidsParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgDeleteBids", value: MsgDeleteBids.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteBids: Could not create message: ' + e.message)
			}
		},
		
		msgPlaceBid({ value }: msgPlaceBidParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgPlaceBid", value: MsgPlaceBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPlaceBid: Could not create message: ' + e.message)
			}
		},
		
		msgCreateHighestPerHundred({ value }: msgCreateHighestPerHundredParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgCreateHighestPerHundred", value: MsgCreateHighestPerHundred.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateHighestPerHundred: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteHighestPerHundred({ value }: msgDeleteHighestPerHundredParams): EncodeObject {
			try {
				return { typeUrl: "/carauction.car.MsgDeleteHighestPerHundred", value: MsgDeleteHighestPerHundred.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteHighestPerHundred: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			CarauctionCar: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;